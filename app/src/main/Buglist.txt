
Some notes on Workers/Services
    -Workers are great because they guarantee that their tasks will be completed even if the app crashes or even if the phone restarts.
    -So the obvious use case for workers would be to handle the uploading of received logs, since that can and should be done in the background, and reliability is important
    -Right now, we're using the FirebaseWorker pretty much only to launch the firebase service, not to actually run any of the firebaseservice functions. So we have all the overhead of a worker, but I don't think we're actually getting any benefit.


-The phone stops adding data to the uploaded logs after 24 hours or so, which we think was when the battery ran out and the phone was no longer charging
-After an unspecified amount of time with autoRotate toggled off, the receiver will spontaneously start rotating counterclockwise and won't stop until you force it to in some way
-Some slight kinks in the rotation state machine to be ironed out
    -The logic to go into returning_to_bounds_ccw doesn't work if the angle measurement is greater than 360 degrees
-Recovery from disconnect errors needs to be implemented as a safeguard
-All errors and exceptions should get written to a file so that we can debug things after a long period of time (just pipe logcat out?)
    -Exception handling in general should be better; currently there is no recovery from any kind of runtime exception

-Some packets stored in the logs are much longer than they should be; they have the full correct packet and then up to several hundred bytes of additional bad data. We should stop adding more to parse after 251 bytes.
-Include logging magnetometer data as well as the potentiometer data to firebase




-tried having FirebaseWorker just run uploadLog() if a FirebaseService already existed, and got this error:
5428 WM-WorkerWrapper        de.kai_morich.simple_usb_terminal    E  Work [ id=0fa2efb3-6899-4c5b-b2f2-bc9fc4c31c06, tags={ de.kai_morich.simple_usb_terminal.FirebaseWorker } ] failed because it threw an exception/error
                                                                                                    java.util.concurrent.ExecutionException: java.lang.NullPointerException: Attempt to invoke virtual method 'android.content.Context android.content.Context.getApplicationContext()' on a null object reference
                                                                                                    	at androidx.work.impl.utils.futures.AbstractFuture.getDoneValue(AbstractFuture.java:516)
                                                                                                    	at androidx.work.impl.utils.futures.AbstractFuture.get(AbstractFuture.java:475)
                                                                                                    	at androidx.work.impl.WorkerWrapper$2.run(WorkerWrapper.java:311)
                                                                                                    	at androidx.work.impl.utils.SerialExecutor$Task.run(SerialExecutor.java:91)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1137)
                                                                                                    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637)
                                                                                                    	at java.lang.Thread.run(Thread.java:1012)
                                                                                                    Caused by: java.lang.NullPointerException: Attempt to invoke virtual method 'android.content.Context android.content.Context.getApplicationContext()' on a null object reference
                                                                                                    	at android.content.ContextWrapper.getApplicationContext(ContextWrapper.java:125)
                                                                                                    	at de.kai_morich.simple_usb_terminal.FirebaseService.uploadLog(FirebaseService.kt:250)
                                                                                                    	at de.kai_morich.simple_usb_terminal.FirebaseWorker.doWork(FirebaseWorker.kt:50)
                                                                                                    	at androidx.work.CoroutineWorker$startWork$1.invokeSuspend(CoroutineWorker.kt:68)
                                                                                                    	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
                                                                                                    	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
                                                                                                    	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:571)
                                                                                                    	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)
                                                                                                    	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:678)
                                                                                                    	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:665)